using NUnit.Framework;
using System.Text;

namespace bitcoin_from_scratch.Test
{
    public class UtilsTest
    {
        // Test cases from https://github.com/bitcoin/bitcoin/blob/master/src/test/base58_tests.cpp
        [TestCase("1112", new byte[]{0x00, 0x00, 0x00, 0x01})]
        [TestCase("2g", new byte[] { 0x61 })]
        [TestCase("a3gV", new byte[] { 0x62, 0x62, 0x62 })]
        [TestCase("aPEr", new byte[] { 0x63, 0x63, 0x63 })]
        [TestCase("2cFupjhnEsSn59qHXstmK2ffpLv2", new byte[] { 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67 })]
		[TestCase("1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L", new byte[] { 0x00, 0xeb, 0x15, 0x23, 0x1d, 0xfc, 0xeb, 0x60, 0x92, 0x58, 0x86, 0xb6, 0x7d, 0x06, 0x52, 0x99, 0x92, 0x59, 0x15, 0xae, 0xb1, 0x72, 0xc0, 0x66, 0x47 })]
        [TestCase("ABnLTmg", new byte[] { 0x51, 0x6b, 0x6f, 0xcd, 0x0f })]
        [TestCase("3SEo3LWLoPntC", new byte[] { 0xbf, 0x4f, 0x89, 0x00, 0x1e, 0x67, 0x02, 0x74, 0xdd })]
        [TestCase("3EFU7m", new byte[] { 0x57, 0x2e, 0x47, 0x94 })]
        [TestCase("EJDM8drfXA6uyA", new byte[] { 0xec, 0xac, 0x89, 0xca, 0xd9, 0x39, 0x23, 0xc0, 0x23, 0x21 })]
        [TestCase("Rt5zm", new byte[] { 0x10, 0xc8, 0x51, 0x1e })]
        [TestCase("1111111111", new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 })]
        public void CanEncodeBase58(string expected, byte[] input)
        {
            var encodedBytes = Utils.Base58Encode(input);

            var encodedString = Encoding.ASCII.GetString(encodedBytes);
            Assert.That(encodedString, Is.EqualTo(expected));
        }

        [TestCase("1112", new byte[]{0x00, 0x00, 0x00, 0x01})]
        [TestCase("2g", new byte[] { 0x61 })]
        [TestCase("a3gV", new byte[] { 0x62, 0x62, 0x62 })]
        [TestCase("aPEr", new byte[] { 0x63, 0x63, 0x63 })]
        [TestCase("2cFupjhnEsSn59qHXstmK2ffpLv2", new byte[] { 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67 })]
        [TestCase("1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L", new byte[] { 0x00, 0xeb, 0x15, 0x23, 0x1d, 0xfc, 0xeb, 0x60, 0x92, 0x58, 0x86, 0xb6, 0x7d, 0x06, 0x52, 0x99, 0x92, 0x59, 0x15, 0xae, 0xb1, 0x72, 0xc0, 0x66, 0x47 })]
        [TestCase("ABnLTmg", new byte[] { 0x51, 0x6b, 0x6f, 0xcd, 0x0f })]
        [TestCase("3SEo3LWLoPntC", new byte[] { 0xbf, 0x4f, 0x89, 0x00, 0x1e, 0x67, 0x02, 0x74, 0xdd })]
        [TestCase("3EFU7m", new byte[] { 0x57, 0x2e, 0x47, 0x94 })]
        [TestCase("EJDM8drfXA6uyA", new byte[] { 0xec, 0xac, 0x89, 0xca, 0xd9, 0x39, 0x23, 0xc0, 0x23, 0x21 })]
        [TestCase("Rt5zm", new byte[] { 0x10, 0xc8, 0x51, 0x1e })]
        [TestCase("1111111111", new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 })]
        public void CanDecodeBase58(string input, byte[] expected)
        {
            var decodedBytes = Utils.Base58Decode(input);
            Assert.That(BitConverter.ToString(decodedBytes), Is.EqualTo(BitConverter.ToString(expected)));
        }
    }
}
